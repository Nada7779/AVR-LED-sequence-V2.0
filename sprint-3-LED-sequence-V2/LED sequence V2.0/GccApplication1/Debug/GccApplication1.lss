
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000412  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000486  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c5e  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bc  00000000  00000000  00001262  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000707  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000787  00000000  00000000  00002705  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_1>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  54:	6d 00       	.word	0x006d	; ????
  56:	7d 00       	.word	0x007d	; ????
  58:	82 00       	.word	0x0082	; ????
  5a:	87 00       	.word	0x0087	; ????
  5c:	8c 00       	.word	0x008c	; ????
  5e:	91 00       	.word	0x0091	; ????
  60:	96 00       	.word	0x0096	; ????
  62:	9b 00       	.word	0x009b	; ????
  64:	a0 00       	.word	0x00a0	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_clear_bss>:
  72:	20 e0       	ldi	r18, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a1 36       	cpi	r26, 0x61	; 97
  7e:	b2 07       	cpc	r27, r18
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  86:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <APP_init>:
uint8_t sequence= 0;

void APP_init(void)
{
	// LEDs init
	LED_init(led_1_port, led_1_pin);
  8e:	64 e0       	ldi	r22, 0x04	; 4
  90:	81 e4       	ldi	r24, 0x41	; 65
  92:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
	LED_init(led_2_port, led_2_pin);
  96:	63 e0       	ldi	r22, 0x03	; 3
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
	LED_init(led_3_port, led_3_pin);
  9e:	62 e0       	ldi	r22, 0x02	; 2
  a0:	81 e4       	ldi	r24, 0x41	; 65
  a2:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
	LED_init(led_4_port, led_4_pin);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	81 e4       	ldi	r24, 0x41	; 65
  aa:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
	// button init
	Button_init(BUTTON_1_PORT, BUTTON_1_PIN);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	83 e4       	ldi	r24, 0x43	; 67
  b2:	0e 94 bc 00 	call	0x178	; 0x178 <Button_init>
	// Enable global interrupts
	Global_interrupt_enable ();
  b6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Global_interrupt_enable>
	// Choose the external interrupt sense - sense in rising edge
	External_interrupt_mode (rising_edge);
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <External_interrupt_mode>
	// Enable External interrupt 0 - INT0
	Exit_enable0 ();   
  c0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Exit_enable0>
  c4:	08 95       	ret

000000c6 <APP_start>:
}
void APP_start(void){
	while(1)
	{
		
		switch (sequence)
  c6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	e9 30       	cpi	r30, 0x09	; 9
  ce:	f1 05       	cpc	r31, r1
  d0:	d0 f7       	brcc	.-12     	; 0xc6 <APP_start>
  d2:	e6 5d       	subi	r30, 0xD6	; 214
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	0c 94 01 02 	jmp	0x402	; 0x402 <__tablejump2__>
		{
           case 0:
		        LED_off(led_1_port, led_1_pin);
  da:	64 e0       	ldi	r22, 0x04	; 4
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LED_off>
		        LED_off(led_2_port, led_2_pin);
  e2:	63 e0       	ldi	r22, 0x03	; 3
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LED_off>
		        LED_off(led_3_port, led_3_pin);
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LED_off>
		        LED_off(led_4_port, led_4_pin);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LED_off>

           case 1:
		        LED_on(led_1_port, led_1_pin);
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 ca 00 	call	0x194	; 0x194 <LED_on>
				break;
 102:	e1 cf       	rjmp	.-62     	; 0xc6 <APP_start>
		   case 2:
	            LED_on(led_2_port, led_2_pin);
 104:	63 e0       	ldi	r22, 0x03	; 3
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 ca 00 	call	0x194	; 0x194 <LED_on>
	            break;
 10c:	dc cf       	rjmp	.-72     	; 0xc6 <APP_start>
		   case 3:
		   LED_on(led_3_port, led_3_pin);
 10e:	62 e0       	ldi	r22, 0x02	; 2
 110:	81 e4       	ldi	r24, 0x41	; 65
 112:	0e 94 ca 00 	call	0x194	; 0x194 <LED_on>
		   break;
 116:	d7 cf       	rjmp	.-82     	; 0xc6 <APP_start>
		  case 4:
		   LED_on(led_4_port, led_4_pin);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 ca 00 	call	0x194	; 0x194 <LED_on>
		   break;
 120:	d2 cf       	rjmp	.-92     	; 0xc6 <APP_start>
		  case 5:
		    LED_off(led_1_port, led_1_pin);
 122:	64 e0       	ldi	r22, 0x04	; 4
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LED_off>
		    break;
 12a:	cd cf       	rjmp	.-102    	; 0xc6 <APP_start>
		  case 6:
			 LED_off(led_2_port, led_2_pin);
 12c:	63 e0       	ldi	r22, 0x03	; 3
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LED_off>
			 break;
 134:	c8 cf       	rjmp	.-112    	; 0xc6 <APP_start>
		  case 7:
		  LED_off(led_3_port, led_3_pin);
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LED_off>
		  break;
 13e:	c3 cf       	rjmp	.-122    	; 0xc6 <APP_start>
		  case 8:
		  LED_off(led_4_port, led_4_pin);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LED_off>
		  break;
 148:	be cf       	rjmp	.-132    	; 0xc6 <APP_start>

0000014a <__vector_1>:
		}
	}
}
   
   ISR (EXT_INT_0)
   {
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
	  
	   if (sequence < Number_of_sequence)
 156:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	20 f4       	brcc	.+8      	; 0x166 <__vector_1+0x1c>
	   {
		   sequence++;
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 164:	03 c0       	rjmp	.+6      	; 0x16c <__vector_1+0x22>
	   }
	   else
	   {
		   sequence = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	   }
   }
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <Button_init>:

#include "button.h"
 
 // initialize
 void Button_init(uint8_t buttonPort, uint8_t buttonPin) // init button as an input device
 {
 178:	98 2f       	mov	r25, r24
 17a:	86 2f       	mov	r24, r22
	 DIO_init(buttonPin, buttonPort, IN);
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	69 2f       	mov	r22, r25
 180:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_init>
 184:	08 95       	ret

00000186 <LED_init>:




void LED_init(uint8_t ledPort, uint8_t ledPin)
{
 186:	98 2f       	mov	r25, r24
 188:	86 2f       	mov	r24, r22
	DIO_init(ledPin, ledPort, OUT);	
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	69 2f       	mov	r22, r25
 18e:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_init>
 192:	08 95       	ret

00000194 <LED_on>:
}

void LED_on(uint8_t ledPort, uint8_t ledPin)
{
 194:	98 2f       	mov	r25, r24
 196:	86 2f       	mov	r24, r22
	DIO_write(ledPin, ledPort, HIGH);
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	69 2f       	mov	r22, r25
 19c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_write>
 1a0:	08 95       	ret

000001a2 <LED_off>:
}
void LED_off(uint8_t ledPort, uint8_t ledPin)
{
 1a2:	98 2f       	mov	r25, r24
 1a4:	86 2f       	mov	r24, r22
    DIO_write(ledPin, ledPort, LOW);
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	69 2f       	mov	r22, r25
 1aa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <DIO_write>
 1ae:	08 95       	ret

000001b0 <main>:

#include "Application/application.h"

int main(void)
{
	APP_init();
 1b0:	0e 94 47 00 	call	0x8e	; 0x8e <APP_init>
	APP_start();
 1b4:	0e 94 63 00 	call	0xc6	; 0xc6 <APP_start>
}
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	08 95       	ret

000001be <DIO_init>:

// function definitions

void DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch(portNumber)
 1be:	62 34       	cpi	r22, 0x42	; 66
 1c0:	59 f1       	breq	.+86     	; 0x218 <DIO_init+0x5a>
 1c2:	18 f4       	brcc	.+6      	; 0x1ca <DIO_init+0xc>
 1c4:	61 34       	cpi	r22, 0x41	; 65
 1c6:	41 f0       	breq	.+16     	; 0x1d8 <DIO_init+0x1a>
 1c8:	08 95       	ret
 1ca:	63 34       	cpi	r22, 0x43	; 67
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_init+0x12>
 1ce:	44 c0       	rjmp	.+136    	; 0x258 <DIO_init+0x9a>
 1d0:	64 34       	cpi	r22, 0x44	; 68
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <DIO_init+0x18>
 1d4:	60 c0       	rjmp	.+192    	; 0x296 <DIO_init+0xd8>
 1d6:	08 95       	ret
	{
		case PORT_A: 
		if(direction==IN)
 1d8:	41 11       	cpse	r20, r1
 1da:	0e c0       	rjmp	.+28     	; 0x1f8 <DIO_init+0x3a>
		{
			DDRA &= ~(1<<pinNumber); // pin init. input
 1dc:	4a b3       	in	r20, 0x1a	; 26
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	b9 01       	movw	r22, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_init+0x2c>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	8a 95       	dec	r24
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_init+0x28>
 1ee:	cb 01       	movw	r24, r22
 1f0:	80 95       	com	r24
 1f2:	84 23       	and	r24, r20
 1f4:	8a bb       	out	0x1a, r24	; 26
 1f6:	08 95       	ret
	    }
		else if(direction==OUT)
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_init+0x40>
 1fc:	6a c0       	rjmp	.+212    	; 0x2d2 <DIO_init+0x114>
		{
			DDRA |= (1<<pinNumber); // pin init. output
 1fe:	4a b3       	in	r20, 0x1a	; 26
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	b9 01       	movw	r22, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_init+0x4e>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_init+0x4a>
 210:	cb 01       	movw	r24, r22
 212:	84 2b       	or	r24, r20
 214:	8a bb       	out	0x1a, r24	; 26
 216:	08 95       	ret
			// Error handling
		}
	    break;
	    
		case PORT_B:
		if(direction==IN)
 218:	41 11       	cpse	r20, r1
 21a:	0e c0       	rjmp	.+28     	; 0x238 <DIO_init+0x7a>
		{
			DDRB &= ~(1<<pinNumber); // pin init. input
 21c:	47 b3       	in	r20, 0x17	; 23
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	b9 01       	movw	r22, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_init+0x6c>
 226:	66 0f       	add	r22, r22
 228:	77 1f       	adc	r23, r23
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_init+0x68>
 22e:	cb 01       	movw	r24, r22
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	87 bb       	out	0x17, r24	; 23
 236:	08 95       	ret
		}
		else if(direction==OUT)
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	09 f0       	breq	.+2      	; 0x23e <DIO_init+0x80>
 23c:	4a c0       	rjmp	.+148    	; 0x2d2 <DIO_init+0x114>
		{
			DDRB |= (1<<pinNumber); // pin init. output
 23e:	47 b3       	in	r20, 0x17	; 23
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_init+0x8e>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_init+0x8a>
 250:	cb 01       	movw	r24, r22
 252:	84 2b       	or	r24, r20
 254:	87 bb       	out	0x17, r24	; 23
 256:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(direction==IN)
 258:	41 11       	cpse	r20, r1
 25a:	0e c0       	rjmp	.+28     	; 0x278 <DIO_init+0xba>
		{
			DDRC &= ~(1<<pinNumber); // pin init. input
 25c:	44 b3       	in	r20, 0x14	; 20
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	b9 01       	movw	r22, r18
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_init+0xac>
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	8a 95       	dec	r24
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_init+0xa8>
 26e:	cb 01       	movw	r24, r22
 270:	80 95       	com	r24
 272:	84 23       	and	r24, r20
 274:	84 bb       	out	0x14, r24	; 20
 276:	08 95       	ret
		}
		else if(direction==OUT)
 278:	41 30       	cpi	r20, 0x01	; 1
 27a:	59 f5       	brne	.+86     	; 0x2d2 <DIO_init+0x114>
		{
			DDRC |= (1<<pinNumber); // pin init. output
 27c:	44 b3       	in	r20, 0x14	; 20
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	b9 01       	movw	r22, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_init+0xcc>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	8a 95       	dec	r24
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_init+0xc8>
 28e:	cb 01       	movw	r24, r22
 290:	84 2b       	or	r24, r20
 292:	84 bb       	out	0x14, r24	; 20
 294:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(direction==IN)
 296:	41 11       	cpse	r20, r1
 298:	0e c0       	rjmp	.+28     	; 0x2b6 <DIO_init+0xf8>
		{
			DDRD &= ~(1<<pinNumber); // pin init. input
 29a:	41 b3       	in	r20, 0x11	; 17
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b9 01       	movw	r22, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_init+0xea>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	8a 95       	dec	r24
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_init+0xe6>
 2ac:	cb 01       	movw	r24, r22
 2ae:	80 95       	com	r24
 2b0:	84 23       	and	r24, r20
 2b2:	81 bb       	out	0x11, r24	; 17
 2b4:	08 95       	ret
		}
		else if(direction==OUT)
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	61 f4       	brne	.+24     	; 0x2d2 <DIO_init+0x114>
		{
			DDRD |= (1<<pinNumber); // pin init. output
 2ba:	41 b3       	in	r20, 0x11	; 17
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	b9 01       	movw	r22, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_init+0x10a>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	8a 95       	dec	r24
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_init+0x106>
 2cc:	cb 01       	movw	r24, r22
 2ce:	84 2b       	or	r24, r20
 2d0:	81 bb       	out	0x11, r24	; 17
 2d2:	08 95       	ret

000002d4 <DIO_write>:
	}
	}// Initialize DIO direction

void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch(portNumber)
 2d4:	62 34       	cpi	r22, 0x42	; 66
 2d6:	59 f1       	breq	.+86     	; 0x32e <DIO_write+0x5a>
 2d8:	18 f4       	brcc	.+6      	; 0x2e0 <DIO_write+0xc>
 2da:	61 34       	cpi	r22, 0x41	; 65
 2dc:	41 f0       	breq	.+16     	; 0x2ee <DIO_write+0x1a>
 2de:	08 95       	ret
 2e0:	63 34       	cpi	r22, 0x43	; 67
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <DIO_write+0x12>
 2e4:	44 c0       	rjmp	.+136    	; 0x36e <DIO_write+0x9a>
 2e6:	64 34       	cpi	r22, 0x44	; 68
 2e8:	09 f4       	brne	.+2      	; 0x2ec <DIO_write+0x18>
 2ea:	60 c0       	rjmp	.+192    	; 0x3ac <DIO_write+0xd8>
 2ec:	08 95       	ret
	{
		case PORT_A:
		if(value== LOW)
 2ee:	41 11       	cpse	r20, r1
 2f0:	0e c0       	rjmp	.+28     	; 0x30e <DIO_write+0x3a>
		{
			PORTA &= ~(1<<pinNumber); // write 0
 2f2:	4b b3       	in	r20, 0x1b	; 27
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	b9 01       	movw	r22, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_write+0x2c>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	8a 95       	dec	r24
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_write+0x28>
 304:	cb 01       	movw	r24, r22
 306:	80 95       	com	r24
 308:	84 23       	and	r24, r20
 30a:	8b bb       	out	0x1b, r24	; 27
 30c:	08 95       	ret
		}
		else if(value==HIGH)
 30e:	41 30       	cpi	r20, 0x01	; 1
 310:	09 f0       	breq	.+2      	; 0x314 <DIO_write+0x40>
 312:	6a c0       	rjmp	.+212    	; 0x3e8 <DIO_write+0x114>
		{
			PORTA |= (1<<pinNumber); // write 1
 314:	4b b3       	in	r20, 0x1b	; 27
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	b9 01       	movw	r22, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_write+0x4e>
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	8a 95       	dec	r24
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_write+0x4a>
 326:	cb 01       	movw	r24, r22
 328:	84 2b       	or	r24, r20
 32a:	8b bb       	out	0x1b, r24	; 27
 32c:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_B:
		if(value== LOW)
 32e:	41 11       	cpse	r20, r1
 330:	0e c0       	rjmp	.+28     	; 0x34e <DIO_write+0x7a>
		{
			PORTB &= ~(1<<pinNumber); // write 0
 332:	48 b3       	in	r20, 0x18	; 24
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	b9 01       	movw	r22, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_write+0x6c>
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	8a 95       	dec	r24
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_write+0x68>
 344:	cb 01       	movw	r24, r22
 346:	80 95       	com	r24
 348:	84 23       	and	r24, r20
 34a:	88 bb       	out	0x18, r24	; 24
 34c:	08 95       	ret
		}
		else if(value==HIGH)
 34e:	41 30       	cpi	r20, 0x01	; 1
 350:	09 f0       	breq	.+2      	; 0x354 <DIO_write+0x80>
 352:	4a c0       	rjmp	.+148    	; 0x3e8 <DIO_write+0x114>
		{
			PORTB |= (1<<pinNumber); // write 1
 354:	48 b3       	in	r20, 0x18	; 24
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	b9 01       	movw	r22, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_write+0x8e>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_write+0x8a>
 366:	cb 01       	movw	r24, r22
 368:	84 2b       	or	r24, r20
 36a:	88 bb       	out	0x18, r24	; 24
 36c:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_C:
		if(value== LOW)
 36e:	41 11       	cpse	r20, r1
 370:	0e c0       	rjmp	.+28     	; 0x38e <DIO_write+0xba>
		{
			PORTC &= ~(1<<pinNumber); // write 0
 372:	45 b3       	in	r20, 0x15	; 21
 374:	21 e0       	ldi	r18, 0x01	; 1
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	b9 01       	movw	r22, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_write+0xac>
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	8a 95       	dec	r24
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_write+0xa8>
 384:	cb 01       	movw	r24, r22
 386:	80 95       	com	r24
 388:	84 23       	and	r24, r20
 38a:	85 bb       	out	0x15, r24	; 21
 38c:	08 95       	ret
		}
		else if(value==HIGH)
 38e:	41 30       	cpi	r20, 0x01	; 1
 390:	59 f5       	brne	.+86     	; 0x3e8 <DIO_write+0x114>
		{
			PORTC |= (1<<pinNumber); // write 1
 392:	45 b3       	in	r20, 0x15	; 21
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	b9 01       	movw	r22, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_write+0xcc>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	8a 95       	dec	r24
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_write+0xc8>
 3a4:	cb 01       	movw	r24, r22
 3a6:	84 2b       	or	r24, r20
 3a8:	85 bb       	out	0x15, r24	; 21
 3aa:	08 95       	ret
			// Error handling
		}
		break;
		
		case PORT_D:
		if(value== LOW)
 3ac:	41 11       	cpse	r20, r1
 3ae:	0e c0       	rjmp	.+28     	; 0x3cc <DIO_write+0xf8>
		{
			PORTD &= ~(1<<pinNumber); // write 0
 3b0:	42 b3       	in	r20, 0x12	; 18
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	b9 01       	movw	r22, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_write+0xea>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	8a 95       	dec	r24
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_write+0xe6>
 3c2:	cb 01       	movw	r24, r22
 3c4:	80 95       	com	r24
 3c6:	84 23       	and	r24, r20
 3c8:	82 bb       	out	0x12, r24	; 18
 3ca:	08 95       	ret
		}
		else if(value==HIGH)
 3cc:	41 30       	cpi	r20, 0x01	; 1
 3ce:	61 f4       	brne	.+24     	; 0x3e8 <DIO_write+0x114>
		{
			PORTD |= (1<<pinNumber); // write 1
 3d0:	42 b3       	in	r20, 0x12	; 18
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	b9 01       	movw	r22, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_write+0x10a>
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	8a 95       	dec	r24
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_write+0x106>
 3e2:	cb 01       	movw	r24, r22
 3e4:	84 2b       	or	r24, r20
 3e6:	82 bb       	out	0x12, r24	; 18
 3e8:	08 95       	ret

000003ea <Global_interrupt_enable>:
}

// Disable global interrupts
void Global_interrupt_disable (void)
{
	cli();
 3ea:	78 94       	sei
 3ec:	08 95       	ret

000003ee <Exit_enable0>:
}

// enable external interrupt 0
void Exit_enable0 (void)
{
	GICR |= (1<<6);
 3ee:	8b b7       	in	r24, 0x3b	; 59
 3f0:	80 64       	ori	r24, 0x40	; 64
 3f2:	8b bf       	out	0x3b, r24	; 59
 3f4:	08 95       	ret

000003f6 <External_interrupt_mode>:
}

// Choose the external interrupt mode
void External_interrupt_mode (uint8_t mode)
{
	if (mode==rising_edge)  
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	19 f4       	brne	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
	{
		MCUCR |= (1<<0) | (1<<1);
 3fa:	85 b7       	in	r24, 0x35	; 53
 3fc:	83 60       	ori	r24, 0x03	; 3
 3fe:	85 bf       	out	0x35, r24	; 53
 400:	08 95       	ret

00000402 <__tablejump2__>:
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	05 90       	lpm	r0, Z+
 408:	f4 91       	lpm	r31, Z
 40a:	e0 2d       	mov	r30, r0
 40c:	09 94       	ijmp

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
